{"version":3,"file":"lit-element.js","sourceRoot":"","sources":["src/lit-element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {\n  PropertiesChangedConstructor\n} from '/local/button-card-depends/@polymer/polymer/lib/mixins/properties-changed.js';\nimport {PropertiesMixin} from '/local/button-card-depends/@polymer/polymer/lib/mixins/properties-mixin.js';\nimport {\n  PropertiesMixinConstructor\n} from '/local/button-card-depends/@polymer/polymer/lib/mixins/properties-mixin.js';\nimport {camelToDashCase} from '/local/button-card-depends/@polymer/polymer/lib/utils/case-map.js';\nimport {render} from '/local/button-card-depends/lit-html/lib/shady-render.js';\nimport {TemplateResult} from '/local/button-card-depends/lit-html//local/button-card-depends/lit-html.js';\n\nexport {\n  PropertiesChangedConstructor\n} from '/local/button-card-depends/@polymer/polymer/lib/mixins/properties-changed.js';\nexport {\n  PropertiesMixinConstructor\n} from '/local/button-card-depends/@polymer/polymer/lib/mixins/properties-mixin.js';\nexport {html, svg} from '/local/button-card-depends/lit-html/lib/lit-extended.js';\n\n// This is a hack to get tsc to not complain about unused interfaces and\n// still generate the type declarations properly\nexport type __unused = PropertiesChangedConstructor&PropertiesMixinConstructor;\n\n/**\n * Renders attributes to the given element based on the `attrInfo` object where\n * boolean values are added/removed as attributes.\n * @param element Element on which to set attributes.\n * @param attrInfo Object describing attributes.\n */\nexport function renderAttributes(\n    element: HTMLElement, attrInfo: {[name: string]: string|boolean|number}) {\n  for (const a in attrInfo) {\n    const v = attrInfo[a] === true ? '' : attrInfo[a];\n    if (v || v === '' || v === 0) {\n      if (element.getAttribute(a) !== v) {\n        element.setAttribute(a, String(v));\n      }\n    } else if (element.hasAttribute(a)) {\n      element.removeAttribute(a);\n    }\n  }\n}\n\n/**\n * Returns a string of css class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(\n    classInfo: {[name: string]: string|boolean|number}) {\n  const o = [];\n  for (const name in classInfo) {\n    const v = classInfo[name];\n    if (v) {\n      o.push(name);\n    }\n  }\n  return o.join(' ');\n}\n\n/**\n * Returns a css style string formed by taking the properties in the `styleInfo`\n * object and appending the property name (dash-cased) colon the\n * property value. Properties are separated by a semi-colon.\n * @param styleInfo\n */\nexport function styleString(\n    styleInfo: {[name: string]: string|boolean|number}) {\n  const o = [];\n  for (const name in styleInfo) {\n    const v = styleInfo[name];\n    if (v || v === 0) {\n      o.push(`${camelToDashCase(name)}: ${v}`);\n    }\n  }\n  return o.join('; ');\n}\n\nexport class LitElement extends PropertiesMixin\n(HTMLElement) {\n\n  private __renderComplete: Promise<boolean>|null = null;\n  private __resolveRenderComplete: Function|null = null;\n  private __isInvalid: Boolean = false;\n  private __isChanging: Boolean = false;\n  private _root?: Element|DocumentFragment;\n\n  /**\n   * Override which sets up element rendering by calling* `_createRoot`\n   * and `_firstRendered`.\n   */\n  ready() {\n    this._root = this._createRoot();\n    super.ready();\n    this._firstRendered();\n  }\n\n  connectedCallback() {\n    if (window.ShadyCSS && this._root) {\n      window.ShadyCSS.styleElement(this);\n    }\n    super.connectedCallback();\n  }\n\n  /**\n   * Called after the element DOM is rendered for the first time.\n   * Implement to perform tasks after first rendering like capturing a\n   * reference to a static node which must be directly manipulated.\n   * This should not be commonly needed. For tasks which should be performed\n   * before first render, use the element constructor.\n   */\n  _firstRendered() {}\n\n  /**\n   * Implement to customize where the element's template is rendered by\n   * returning an element into which to render. By default this creates\n   * a shadowRoot for the element. To render into the element's childNodes,\n   * return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected _createRoot(): Element|DocumentFragment {\n    return this.attachShadow({mode : 'open'});\n  }\n\n  /**\n   * Override which returns the value of `_shouldRender` which users\n   * should implement to control rendering. If this method returns false,\n   * _propertiesChanged will not be called and no rendering will occur even\n   * if property values change or `requestRender` is called.\n   * @param _props Current element properties\n   * @param _changedProps Changing element properties\n   * @param _prevProps Previous element properties\n   * @returns {boolean} Default implementation always returns true.\n   */\n  _shouldPropertiesChange(_props: object, _changedProps: object,\n                          _prevProps: object): boolean {\n    const shouldRender = this._shouldRender(_props, _changedProps, _prevProps);\n    if (!shouldRender && this.__resolveRenderComplete) {\n      this.__resolveRenderComplete(false);\n    }\n    return shouldRender;\n  }\n\n  /**\n   * Implement to control if rendering should occur when property values\n   * change or `requestRender` is called. By default, this method always\n   * returns true, but this can be customized as an optimization to avoid\n   * rendering work when changes occur which should not be rendered.\n   * @param _props Current element properties\n   * @param _changedProps Changing element properties\n   * @param _prevProps Previous element properties\n   * @returns {boolean} Default implementation always returns true.\n   */\n  protected _shouldRender(_props: object, _changedProps: object,\n                          _prevProps: object): boolean {\n    return true;\n  }\n\n  /**\n   * Override which performs element rendering by calling\n   * `_render`, `_applyRender`, and finally `_didRender`.\n   * @param props Current element properties\n   * @param changedProps Changing element properties\n   * @param prevProps Previous element properties\n   */\n  _propertiesChanged(props: object, changedProps: object, prevProps: object) {\n    super._propertiesChanged(props, changedProps, prevProps);\n    const result = this._render(props);\n    if (result && this._root !== undefined) {\n      this._applyRender(result, this._root!);\n    }\n    this._didRender(props, changedProps, prevProps);\n    if (this.__resolveRenderComplete) {\n      this.__resolveRenderComplete(true);\n    }\n  }\n\n  _flushProperties() {\n    this.__isChanging = true;\n    this.__isInvalid = false;\n    super._flushProperties();\n    this.__isChanging = false;\n  }\n\n  /**\n   * Override which warns when a user attempts to change a property during\n   * the rendering lifecycle. This is an anti-pattern and should be avoided.\n   * @param property {string}\n   * @param value {any}\n   * @param old {any}\n   */\n  // tslint:disable-next-line no-any\n  _shouldPropertyChange(property: string, value: any, old: any) {\n    const change = super._shouldPropertyChange(property, value, old);\n    if (change && this.__isChanging) {\n      console.trace(\n          `Setting properties in response to other properties changing ` +\n          `considered harmful. Setting '${property}' from ` +\n          `'${this._getProperty(property)}' to '${value}'.`);\n    }\n    return change;\n  }\n\n  /**\n   * Implement to describe the DOM which should be rendered in the element.\n   * Ideally, the implementation is a pure function using only props to describe\n   * the element template. The implementation must return a `/local/button-card-depends/lit-html`\n   * TemplateResult. By default this template is rendered into the element's\n   * shadowRoot. This can be customized by implementing `_createRoot`. This\n   * method must be implemented.\n   * @param {*} _props Current element properties\n   * @returns {TemplateResult} Must return a /local/button-card-depends/lit-html TemplateResult.\n   */\n  protected _render(_props: object): TemplateResult {\n    throw new Error('_render() not implemented');\n  }\n\n  /**\n   * Renders the given /local/button-card-depends/lit-html template `result` into the given `node`.\n   * Implement to customize the way rendering is applied. This is should not\n   * typically be needed and is provided for advanced use cases.\n   * @param result {TemplateResult} `/local/button-card-depends/lit-html` template result to render\n   * @param node {Element|DocumentFragment} node into which to render\n   */\n  protected _applyRender(result: TemplateResult,\n                         node: Element|DocumentFragment) {\n    render(result, node, this.localName!);\n  }\n\n  /**\n   * Called after element DOM has been rendered. Implement to\n   * directly control rendered DOM. Typically this is not needed as `/local/button-card-depends/lit-html`\n   * can be used in the `_render` method to set properties, attributes, and\n   * event listeners. However, it is sometimes useful for calling methods on\n   * rendered elements, like calling `focus()` on an element to focus it.\n   * @param _props Current element properties\n   * @param _changedProps Changing element properties\n   * @param _prevProps Previous element properties\n   */\n  protected _didRender(_props: object, _changedProps: object,\n                       _prevProps: object) {}\n\n  /**\n   * Call to request the element to asynchronously re-render regardless\n   * of whether or not any property changes are pending.\n   */\n  requestRender() { this._invalidateProperties(); }\n\n  /**\n   * Override which provides tracking of invalidated state.\n   */\n  _invalidateProperties() {\n    this.__isInvalid = true;\n    super._invalidateProperties();\n  }\n\n  /**\n   * Returns a promise which resolves after the element next renders.\n   * The promise resolves to `true` if the element rendered and `false` if the\n   * element did not render.\n   * This is useful when users (e.g. tests) need to react to the rendered state\n   * of the element after a change is made.\n   * This can also be useful in event handlers if it is desireable to wait\n   * to send an event until after rendering. If possible implement the\n   * `_didRender` method to directly respond to rendering within the\n   * rendering lifecycle.\n   */\n  get renderComplete() {\n    if (!this.__renderComplete) {\n      this.__renderComplete = new Promise((resolve) => {\n        this.__resolveRenderComplete = (value: boolean) => {\n          this.__resolveRenderComplete = this.__renderComplete = null;\n          resolve(value);\n        };\n      });\n      if (!this.__isInvalid && this.__resolveRenderComplete) {\n        Promise.resolve().then(() => this.__resolveRenderComplete!(false));\n      }\n    }\n    return this.__renderComplete;\n  }\n}\n"]}