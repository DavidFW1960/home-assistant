automation:
  - id: '1507434167220'
    alias: Coffee Maker On
    trigger:
    - platform: time
      at:
        - '07:00:00'
        - '07:15:00'
        - '08:00:00'
        - '12:00:00'
        - '12:30:00'
        - '13:30:00'
        - '18:30:00'
        - '19:00:00'
        - '20:00:00'
    - entity_id: person.liz
      from: 'not_home'
      platform: state
      to: 'home'
    condition:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - condition: state
          entity_id: 'input_boolean.homeandawayauto'
          state: 'on'
        - condition: state
          entity_id: input_boolean.lizcovid
          state: 'off'
        - condition: or
          conditions:
            - "{{ now().strftime('%H:%M') == '07:00' and (states('binary_sensor.workday_sensor') == 'on') and (states('input_boolean.holiday') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '08:00' }}"
            - "{{ now().strftime('%H:%M') == '12:30' and (states('binary_sensor.workday_sensor') == 'on') }}"
            - "{{ now().strftime('%H:%M') == '13:30' and (states('binary_sensor.workday_sensor') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '18:30' }}" 
      - condition: and
        conditions:
        - condition: state
          entity_id: 'input_boolean.homeandawayauto'
          state: 'on'
        - condition: state
          entity_id: input_boolean.lizcovid
          state: 'on'
        - condition: or
          conditions:
            - "{{ now().strftime('%H:%M') == '07:00' and (states('binary_sensor.workday_sensor') == 'on') and (states('input_boolean.holiday') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '07:15' and ((as_timestamp(now()) - as_timestamp('2017-09-24 00:00:00')) / 86400)|int % 28 == 0 }}"
            - "{{ now().strftime('%H:%M') == '08:00' }}"
            - "{{ now().strftime('%H:%M') == '12:00' and ((as_timestamp(now()) - as_timestamp('2017-09-24 00:00:00')) / 86400)|int % 28 == 0 }}"
            - "{{ now().strftime('%H:%M') == '13:30' and (states('binary_sensor.workday_sensor') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '19:00' and (states('input_boolean.overtime') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '19:00' and (states('binary_sensor.workday_sensor') == 'off') }}"
            - "{{ now().strftime('%H:%M') == '20:00' and (states('input_boolean.overtime') == 'on') and (states('binary_sensor.workday_sensor') == 'on') }}"
            - condition: and
              conditions:
                - "{{ (states('binary_sensor.workday_sensor') == 'on') }}"
                - condition: time
                  after: '18:00:00'
                  before: '19:00:00'
                - condition: state
                  entity_id: person.liz
                  state: 'home'
    action:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff12914
    - condition: and
      conditions:
        - "{{ (states('binary_sensor.workday_sensor') == 'on') }}"
        - condition: time
          after: '18:00:00'
          before: '19:00:00'
        - condition: state
          entity_id: input_boolean.lizcovid
          state: 'on'
        - condition: state
          entity_id: person.liz
          state: 'home'      
    - service: notify.david_ios_notify
      data:
        message: 'Coffee Maker On'
        title: 'Liz is home'
  - id: '1507434167221'
    alias: Coffee Maker Off
    trigger:
    - platform: time
      at:
        - '08:30:00'
        - '10:30:00'
        - '11:00:00'
        - '14:00:00'
        - '16:00:00'
        - '22:00:00'
    condition:
      condition: or
      conditions:
      - "{{ now().strftime('%H:%M') == '08:30' and (((as_timestamp(now()) - as_timestamp('2017-09-24 00:00:00')) / 86400)|int % 28 == 0) and (states('input_boolean.lizcovid') == 'on') }}"
      - "{{ now().strftime('%H:%M') == '10:30' and (states('binary_sensor.workday_sensor') == 'on') and (states('input_boolean.holiday') == 'off') and (states('input_boolean.lizcovid') == 'off') }}"
      - "{{ now().strftime('%H:%M') == '11:00' and (states('binary_sensor.workday_sensor') == 'off') }}"
      - "{{ now().strftime('%H:%M') == '14:00' and (states('binary_sensor.workday_sensor') == 'on') and (states('input_boolean.holiday') == 'off') }}"
      - "{{ now().strftime('%H:%M') == '16:00' }}"
      - "{{ now().strftime('%H:%M') == '22:00' }}"
    action:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff12914
  - id: '1505977024304'
    alias: Turn Lounge Light On Elevation < 25Â° & after 4PM
    trigger:
    - platform: state
      from: 'on'
      entity_id: 'binary_sensor.sun_above_25'
      to: 'off'
    - platform: time
      at: '16:00:00'
    condition:
    - condition: time
      after: '16:00:00'
    - condition: state
      entity_id: 'input_boolean.homeandawayauto'
      state: 'on'
    - condition: state
      entity_id: 'binary_sensor.sun_above_25'
      state: 'off'
    action:
    - service: script.turn_on
      data:
        entity_id: script.loungenormal
  - id: '1523937971401'
    alias: Toothbrush On
    trigger:
    - platform: time
      at: '08:00:00'
    condition:
    - condition: state
      entity_id: 'input_boolean.homeandawayauto'
      state: 'on'
    action:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff23110
  - id: '1523938046054'
    alias: Toothbrush Off
    trigger:
    - platform: time
      at: '21:00:00'
    - entity_id: switch.sonoff23110
      from: 'off'
      platform: state
      to: 'on'
    condition:
      condition: or
      conditions:
      - condition: time
        after: '21:00:00'
        before: '00:00:00'
      - condition: time
        after: '00:00:00'
        before: '08:00:00'
    action:
    - service: switch.turn_off
      data:
        entity_id: switch.sonoff23110
  - id: '1519082437913'
    alias: Make Snapshot & Copy Backups to Dropbox
    trigger:
    - platform: time
      at: '00:30:00'
    condition: []
    action:
    - service: hassio.snapshot_full
      data:
        name: Automated Backup {{ now().strftime('%Y-%m-%d') }}
    - service: notify.david_ios_notify
      data:
        message: Created backup named "Automated Backup {{ now().strftime('%Y-%m-%d')
          }}"
    - delay: '03:00:00'
    - service: hassio.addon_stdin
      data:
        addon: 7be23ff5_dropbox_sync
        input:
          command: upload
    - service: notify.david_ios_notify
      data:
        message: Copied all new backups to Dropbox
  - id: '1532478833426'
    alias: Lights Off Failsafe
    trigger:
    - platform: state
      from: 'on'
      to: 'off'
      entity_id: light.lounge, light.dining, light.desk, light.office
    condition: []
    mode: restart
    action:
    - service: automation.turn_off
      entity_id: automation.lights_on_failsafe
    - repeat:
        count: '2'
        sequence:
        - delay: '00:00:03'
        - service: light.turn_off
          data:
            entity_id: >
              {% set t = as_timestamp(now()) %}
              {% set lights = [ 
                states.light.lounge,
                states.light.dining,
                states.light.desk,
                states.light.office ] %}
              {% set ns = namespace(entities=[]) %}
              {% for state in lights if t-as_timestamp(state.last_changed) < 10 %}
                {% set ns.entities = ns.entities + [ state.entity_id ] %}
              {% endfor %}
              {{ ns.entities | join(', ') or 'none' }}
    - service: automation.turn_on
      entity_id: automation.lights_on_failsafe
  - id: '1532478833427'
    alias: Lights On Failsafe
    trigger:
    - platform: state
      from: 'off'
      to: 'on'
      entity_id: light.lounge, light.dining, light.desk, light.office
    condition: []
    mode: restart
    action:
    - service: automation.turn_off
      entity_id: automation.lights_off_failsafe
    - repeat:
        count: '2'
        sequence:
        - delay: '00:00:03'
        - service: light.turn_on
          data:
            entity_id: >
              {% set t = as_timestamp(now()) %}
              {% set lights = [ 
                states.light.lounge,
                states.light.dining,
                states.light.desk,
                states.light.office ] %}
              {% set ns = namespace(entities=[]) %}
              {% for state in lights if t-as_timestamp(state.last_changed) < 10 %}
                {% set ns.entities = ns.entities + [ state.entity_id ] %}
              {% endfor %}
              {{ ns.entities | join(', ') or 'none' }}
            brightness: 191   #brightness_pct: 75
            color_temp: 322   #kelvin: 3100
    - service: automation.turn_on
      entity_id: automation.lights_off_failsafe
  - id: 'closegaragesetalarm'
    alias: Close Garage and Set Alarm
    trigger:
    - entity_id: input_boolean.alarmgaragedoor
      from: 'off'
      platform: state
      to: 'on'
    action:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff51083
    - delay: '00:00:10'
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff63719
    - delay: '00:00:10'
    - service: notify.david_ios_notify
      data:
        message: >
          {%- if (as_timestamp(now()) - as_timestamp(states.switch.sonoff63719.last_changed)
          < 60 ) and (as_timestamp(now()) - as_timestamp(states.switch.sonoff51083.last_changed) 
          < 60 ) %} Garage closed & Alarm armed Verified {%- else %} Error occurred arming {%- endif %}
        title: 'Home Arming Notification'
    - service: persistent_notification.create
      data:
        message: >
          {%- if (as_timestamp(now()) - as_timestamp(states.switch.sonoff63719.last_changed)
          < 60 ) and (as_timestamp(now()) - as_timestamp(states.switch.sonoff51083.last_changed) 
          < 60 ) %} Garage closed & Alarm armed Verified {%- else %} Error occurred arming {%- endif %}
  - id: 'deactivatealarmopengarage'
    alias: Deactivate Alarm and Open Garage
    trigger:
    - entity_id: input_boolean.alarmgaragedoor
      from: 'on'
      platform: state
      to: 'off'
    action:
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff63719
    - service: switch.turn_on
      data:
        entity_id: switch.sonoff51083
    - delay: "00:00:10"
    - service: notify.david_ios_notify
      data:
        message: >
          {%- if (as_timestamp(now()) - as_timestamp(states.switch.sonoff63719.last_changed)
          < 60 ) and (as_timestamp(now()) - as_timestamp(states.switch.sonoff51083.last_changed) 
          < 60 ) %} Alarm disabled & Garage opened Verified {%- else %} Error occurred disarming {%- endif %}
        title: 'Home Disarming Notification'
    - service: persistent_notification.create
      data:
        message: >
          {%- if (as_timestamp(now()) - as_timestamp(states.switch.sonoff63719.last_changed)
          < 60 ) and (as_timestamp(now()) - as_timestamp(states.switch.sonoff51083.last_changed) 
          < 60 ) %} Alarm disabled & Garage opened Verified {%- else %} Error occurred disarming {%- endif %}
  - id: 'tasmota_firmware_installed'
    alias: Tasmota Firmware Installed
    trigger:
    - platform: time
      at: 
        - '00:00:00'
        - '12:00:00'
    - event: start
      platform: homeassistant
    action:
    - service: script.turn_on
      data:
        entity_id: script.firmwarealltasmota
  - id: '1532478833428'
    alias: Power State Tasmota on HA Start-Up
    trigger:
    - event: start
      platform: homeassistant
    action:
    - service: script.turn_on
      data:
        entity_id: script.startupalltasmota
  - id: 'dockercontainers'
    alias: Restart Docker Containers when memory > 40%
    trigger:
    - platform: numeric_state
      entity_id: sensor.memory_use_percent
      above: 40
      for:
        hours: 1
    - platform: state
      entity_id: input_boolean.retrigger
      to: 'on'
      for:
        minutes: 10
    action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.retrigger
    - delay: '00:00:01'
    - service: input_boolean.turn_on
      entity_id: input_boolean.retrigger
    - condition: template
      value_template: "{{ now().strftime('%M') < '58' and now().strftime('%M') > '02' and (states('sensor.sonarr_queue') == '0') }}"
    - service: input_boolean.turn_off
      entity_id: input_boolean.retrigger
    - service: switch.turn_off
      entity_id: switch.ha_dockermon_radarr, switch.ha_dockermon_sonarr, switch.ha_dockermon_sabnzbd
    - delay: '00:01:00'
    - service: switch.turn_on
      entity_id: switch.ha_dockermon_radarr, switch.ha_dockermon_sonarr, switch.ha_dockermon_sabnzbd
  - id: 'alarmevent'
    alias: Alarm Event Triggered
    trigger:
    - platform: state
      entity_id: sensor.alarm_triggers
    condition:
      - "{{ states('sensor.alarm_triggers') != '0' and states('sensor.alarm_triggers') != 'unavailable' }}"
    action:
    - service: notify.david_ios_notify
      data:
        message: 'Alarm Event Occurred'
        title: 'Alarm Notification'
    - service: persistent_notification.create
      data:
        message: 'Alarm Event Occurred'
        title: 'Alarm Notification'
  - id: 'alarmeventrefresh'
    alias: 'Alarm Event Check'
    trigger:
    - event: start
      platform: homeassistant
    - platform: time_pattern
      minutes: '/1'
    action:
    - service: homeassistant.update_entity
      entity_id: sensor.alarm_triggers
  - id: 'cleanknowndevices'
    alias: Clean out Known Devices
    trigger:
    - event: start
      platform: homeassistant
    action:
    - service: shell_command.clean_knowndevices
  - id: 'artisanevents'
    alias: Roaster Needs Attention
    trigger:
    - entity_id: sensor.artisan_events
      platform: state
    condition:
      - "{{ states('sensor.artisan_events') != 'unavailable' }}"
    action:
    - service: notify.david_ios_notify
      data:
        message: '{{ states("sensor.artisan_events") }}'
        title: 'Artisan Notification'
    - service: persistent_notification.create
      data:
        message: '{{ states("sensor.artisan_events") }}'
        title: 'Artisan Notification'
    - service: notify.html5_notify
      data:
        message: '{{ states("sensor.artisan_events") }}'
        title: 'Artisan Notification'
  - id: 'restartnodemcu'
    alias: NodeMCU Lounge Restart
    trigger:
    - platform: numeric_state
      entity_id: sensor.nodemcu_lounge_bme280_pressure
      below: 700
    action:
    - service: script.restartnodemculounge
  - id: 'hacspersistentnotification'
    alias: HACS Persistent Notification
    trigger:
      platform: numeric_state
      entity_id: sensor.hacs
      above: 0
      for:
        minutes: 30
    condition:
      - "{{ not is_state('sensor.hacs', 'unknown') }}"
    action:
      - service: persistent_notification.create
        data:
          message: "Update available!"
          title: "HACS"
  - id: 'updateaddonsavailable'
    alias: Update for addon available
    trigger:
      platform: numeric_state
      entity_id: sensor.supervisor_installed
      above: 0
    action:
      - service: persistent_notification.create
        data:
          message: "Update available!"
          title: "Addons"
      - service: notify.david_ios_notify
        data_template:
          message: "Update Available"
          title: "Addons"
      - service: notify.html5_notify
        data:
          message: "Update Available"
          title: "Addons"
  - id: '1593407614869'
    alias: Is Liz at Work or Home?
    trigger:
    - at: '09:00:00'
      platform: time
    condition:
    - "{{ now().strftime('%H:%M') == '09:00' and now().weekday() == 1 }}"
    action:
    - data:
        message: Is Liz Home or at Work today?
      service: notify.david_ios_notify
  - id: 'covidon'
    alias: Liz at Work
    trigger:
    - at: '00:00:00'
      platform: time
    condition:
    - "{{ now().strftime('%H:%M') == '00:00' and now().weekday() == 1 }}"
    action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.lizcovid
    - data:
        message: Liz is at Work today. Covid-Liz is On.
      service: notify.david_ios_notify
  - id: 'covidoff'
    alias: Liz at Home
    trigger:
    - at: '00:00:00'
      platform: time
    - entity_id: person.liz
      from: 'not_home'
      platform: state
      to: 'home'
      for: '00:01:00'
    condition:
    - condition: or
      conditions:
      - condition: and
        conditions:
        - condition: state
          entity_id: input_boolean.lizcovid
          state: 'on'        
        - condition: template
          value_template: "{{ now().strftime('%H:%M') < '18:30' and now().weekday() == 1 }}"
    - condition: template
      value_template: "{{ now().strftime('%H:%M') == '00:00' and now().weekday() == 2 }}"
    action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.lizcovid
    - data:
        message: Liz is at Home now. Liz Covid is Off.
      service: notify.david_ios_notify
    mode: single
  - id: 'lightning'
    alias: Lightning
    trigger:
    - platform: state
      entity_id: sensor.blitzortung_lightning_azimuth
    condition: 
    - "{{ states('sensor.blitzortung_lightning_counter') | float != 0 }}"
    mode: restart
    action:
    - service: device_tracker.see
      data:
        dev_id: lightning
        gps:
          - "{{ state_attr('sensor.blitzortung_lightning_azimuth', 'lat') }}"
          - "{{ state_attr('sensor.blitzortung_lightning_azimuth', 'lon') }}"
